#include <iostream>
#include <vector>
#include <list>
#include <string>

using namespace std;


int main(){
    string str;
    int n;
    char c;
   
    cin >> str >> n;
    list<char> editor;
    for(int i=0; i<str.size(); i++){
        editor.push_back(str.at(i));
    }
    list<char>::iterator cursor = editor.end();
    
    for(int i=0; i<n; i++){
        cin >> c;
        if(c=='P'){
            char k;
            cin >> k;
            editor.insert(cursor, k);
        }
        else if(c=='L'){
            if(cursor!=editor.begin()) cursor--;
        }
        else if(c=='D'){
            if(cursor!=editor.end()) cursor++;
        }
        else {
            if(cursor!=editor.begin()){
                cursor = editor.erase(--cursor); // Using erase(), what coder keeps in mind is its return is not void but iterator of following the erased.
            }
        }
    }
    for(list<char>::iterator it=editor.begin(); it!=editor.end(); it++){
        cout << *it;
    }

    return 0;
}


