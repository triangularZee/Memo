#include <vector>
#include <string>
#include <iostream>
#include <queue>

using namespace std;

const int INF = 1000000;

int V, E, K;
vector<vector<pair<int,int>>> graph;
int dist[20001];


void dijkstra(){
    dist[K] = 0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({0,K}); // 가중치, 정점
    
    while(!pq.empty()){
        int val = pq.top().first;
        int vertex = pq.top().second;
        pq.pop();

        if(dist[vertex] < val){ // 최소거리
            continue;
        }

        for(int i=0; i<graph[vertex].size(); i++){
            int nv = graph[vertex][i].first, nd = val + graph[vertex][i].second; // input들어갈때 순서 ( u, v, w )
            if(dist[nv] > nd){
                dist[nv] = nd;
                pq.push({nd, nv}); 
            }
        }
    }
}


int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    cin >> V >> E >> K;
    
    int u, v, w;
    graph.resize(20001);
    for(int i=0; i<E; i++){ 
        cin >> u >> v >> w;
        graph[u].push_back({v,w}); // 정점 u에 v로 w의 가중치
    }
    
    for(int i=1; i<=V; i++) { // 1이상 V이하
        dist[i] = INF;
    }
    
    dijkstra();
    
    for(int i=1; i<=V; i++) { // 1이상 V이하
        if(dist[i] == INF){
            cout << "INF" << '\n';
        }
        else {
            cout << dist[i] << '\n';
        }
    }
}
