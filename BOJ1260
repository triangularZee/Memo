#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>

using namespace std;

bool compare(int a, int b){
    return a > b;
}

void dfs(int start, vector<int> graph[], vector<bool> visited){
    stack<int> s;
    s.push(start);
    while(!s.empty()){
        int vertex = s.top();
        s.pop();
        if(visited[vertex]==false){
            visited[vertex] = true;
            cout << vertex << ' ';
            for(int i=0; i<graph[vertex].size(); i++){
                s.push(graph[vertex][i]);
            }
        }
    }
}

void bfs(int start, vector<int> graph[], vector<bool> visited){
    queue<int> q;
    q.push(start);
    while(!q.empty()){
        int vertex = q.front();
        q.pop();
        if(visited[vertex] == false){
            visited[vertex] = true;
            cout << vertex << ' ';
            for(int i=0; i<graph[vertex].size(); i++){
                q.push(graph[vertex][i]);
            }
        }
    }
}

int main (){


    int n, m, start;
    cin >> n >> m >> start;

    vector<int> graph[n+1];
    vector<bool> check(n+1);
    // C++에서 배열을 쓰면 Call by Ref처럼 동작. 즉 만약에 bool check[n]으로 선언한다면 function의 argument로서 check는 포인터지 배열이 아님.
    // C++은 배열의 타입 안정성이 보장이 잘 안됨. 될 수 있으면 Vector를 사용하는 것을 권함.

    for(int i=0; i<m; i++){
        int u,v;
        cin >> u >> v;

        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    // Sorting은 왜 한거지?
    // 나중에 하나의 정점에서 다음을 탐색할 때 node 값에 순차적으로 접근해야하기 때문
    

    for(int i=1; i<=n; i++){
        sort(graph[i].begin(), graph[i].end(), compare);
    }

    //dfs
    dfs(start, graph, check);
    cout << '\n';
    
    for(int i=1; i<=n; i++){
        sort(graph[i].begin(), graph[i].end());
    }
    
    //bfs
    bfs(start, graph, check);

    return 0;
}
