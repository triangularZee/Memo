Def) capacity : the number of elements that the container has currently allocated space for.
Def) size     : the number of elements in the container.

shrink_to_fit() ; fit capacity to size




int main(){ // 선언&초기화 
vector a(5); 
for(int i=0; i<5; i++){
a.push_back(1); cout << a[i] << ' '; }
} 

----> << 0, 0, 0, 0, 0 >>

int main(){ // resize 
vector a;
a.resize(5);
for(int i=0; i<5; i++){ 
a.push_back(1); 
cout << a[i] << ' '; } 
}

----> << 0, 0, 0, 0, 0 >>

int main(){ // reserve
vector a; a.reserve(5);
for(int i=0; i<5; i++){
a.push_back(1); 
cout << a[i] << ' '; }
}

----> << 1, 1, 1, 1, 1 >>

int main(){ vector a;
a.resize(5); 
for(int i=0; i<5; i++){
a[i] = 1; 
cout << a[i] << ' '; 
} 
cout << endl << a.size() << endl << a.capacity(); 
}

----> << 1, 1, 1, 1, 1, 5, 5 >>

int main(){ .reserve() && indexing  --------- 아주 설명하기 어려운 케이스. 조금 더 알아보길 요망.

// 알아본 결고 대입연산을 해서 접근한 값에 대해 체킹할 수 있는 알고리즘이 vector 내에 존재하지 않음.
// 이는 쉽게 말해 C++ 벡터 컨테이너를 잘못 활용하고 있는 것. 만약에 내부에 순회하는 알고리즘을 하나 더 만들면 가능할 듯. 
// 어찌보면 연속적인 메모리에 높은 자유도를 가진 C처럼 포인터처럼 하는 행위를 제한하느 것이 C++으 철학 탓이 아닐까...
// 랜덤액세스라서 사실상 큰 문제는 없는거 같은데 다만 vector 입장에서 대입연산으 통해 삽입/삭제를 알 수 있는 도리ㄱ 없을뿐


int main(){
    vector<int> a;
    a.reserve(2);
    a[0] = 1;
    a.push_back(2);
    cout << a.size();
}

 ----- > << 1 >>  push_back(), pop_back에만 count에 대한 access가 되는 것으로 보임.


vector a; 
a.reserve(5); 
for(int i=0; i<5; i++){ 
a[i] = 1; cout << a[i] << ' ';
}
cout << endl << a.size() << endl << a.capacity(); 
}

----> << 1, 1, 1, 1, 1, 0, 5 >>

int main(){ // .reserve() && push_back.() 
vector a; 
a.reserve(5);
for(int i=0; i<5; i++){
a.push_back(1); cout << a[i] << ' ';
} 
cout << endl << a.size() << endl << a.capacity();
}

----> << 1, 1, 1, 1, 1, 5, 5 >>

int main(){ // .resize() & .push_back() 
vector a;
a.resize(5); 
for(int i=0; i<5; i++){ 
a.push_back(1); cout << a[i] << ' ';
} 
cout << endl << a.size() << endl << a.capacity();
}

----> << 0, 0, 0, 0, 0, 10, 10 >>




int main(){ // .reserve() && push_back.() beyond the number allocated
    vector<int> a;
    a.reserve(5);
    for(int i=0; i<6; i++){
        a.push_back(1);
        cout << a[i] << ' ';
    }
    cout << endl << a.size() << endl << a.capacity();
}


----> << 1, 1, 1, 1, 1, 6, 10 >>


